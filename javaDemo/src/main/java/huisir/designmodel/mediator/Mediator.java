package huisir.designmodel.mediator;
/**
 * 
 **********************************************************
 * @作者: huisir
 * @日期: 2018年9月17日
 * @描述: 中介者模式
 **********************************************************
 我们在 设计模式（一）设计六大原则这篇文章讲过迪米特原则，这个原则所说的就是要尽量减少对象之间的交互，
 如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，
 可以通过第三者转发这个调用。
 
 
 优点 
    符合迪米特原则，将原有的一对多的依赖变成了一对一的依赖，降低类间的耦合。

缺点 
    中介者会变得庞大且复杂，原本多个对象直接的相互依赖变成了中介者和多个同事类的依赖关系，同事类越多，中介者的逻辑就越复杂。

使用场景 
    中介者模式很容易实现呢，但是也容易误用，不要着急使用，先要思考你的设计是否合理。 
    当对象之间的交互变多时，为了防止一个类会涉及修改其他类的行为，可以使用中介者模式，将系统从网状结构变为以中介者为中心的星型结构。
 */
public abstract class Mediator {
    
	public abstract void notice(String content,Colleague coll);

}